<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.manager.mapper.ManagerMapper">  

  <!-- 관리자_고객센터_자주하는질문_목록 -->
  <select id="getaskList">
   SELECT *
    FROM CUSTOMER_SERVICE
    WHERE ADMIN_USER_IDX IS NOT NULL
      <if test="type != null and type != ''">
        AND CUSTOMER_SERVICE_TYPE = #{type}
      </if>
    ORDER BY CUSTOMER_SERVICE_REGDATE DESC
    OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>
  
  <!-- 관리자_고객센터_자주하는질문_총목록 -->
  <select id="getcountaskList">
   SELECT COUNT(*)
    FROM CUSTOMER_SERVICE
    WHERE ADMIN_USER_IDX IS NOT NULL
      <if test="type != null and type != ''">
        AND CUSTOMER_SERVICE_TYPE = #{type}
      </if>
  </select>
  
  <!-- 관리자_고객센터_자주하는질문_등록 -->
  <insert id="insertask">
   INSERT INTO CUSTOMER_SERVICE 
   	( 
   	  CUSTOMER_SERVICE_IDX, CUSTOMER_SERVICE_TITLE 
     ,CUSTOMER_SERVICE_TYPE, CUSTOMER_SERVICE_REGDATE 
     ,CUSTOMER_SERVICE_CONTENT 
     ,ADMIN_USER_IDX
    ) 
   VALUES 
   	( 
   	 (SELECT NVL(MAX(customer_service_idx),0)+1 FROM CUSTOMER_SERVICE ) 
   	 ,#{customer_service_title} 
     ,#{customer_service_type}
     , SYSDATE
     ,#{customer_service_content}
     ,1
    )
  </insert>
  
  <!-- 관리자_고객센터_자주하는질문_조회 -->
  <select id="selectask">
   SELECT  CUSTOMER_SERVICE_IDX,
           CUSTOMER_SERVICE_TITLE,
           CUSTOMER_SERVICE_TYPE,
           CUSTOMER_SERVICE_CONTENT
    FROM  CUSTOMER_SERVICE
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </select>
  
  <!-- 관리자_고객센터_자주하는질문유형_조회 -->
  <select id="getType">
   SELECT DISTINCT CUSTOMER_SERVICE_TYPE 
     FROM CUSTOMER_SERVICE
  </select>
  
  <!-- 관리자_고객센터_자주하는질문_수정 -->
  <update id="updateask">
    UPDATE CUSTOMER_SERVICE
    SET CUSTOMER_SERVICE_TITLE = #{customer_service_title},
        CUSTOMER_SERVICE_CONTENT = #{customer_service_content},
        CUSTOMER_SERVICE_TYPE = #{customer_service_type}
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </update>
 
  <!-- 관리자_고객센터_자주하는질문_삭제 -->
  <delete id="deleteAsk">
    DELETE FROM CUSTOMER_SERVICE
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </delete>
  
  <!-- 관리자_고객센터_문의내역_목록 -->
  <select id="getmacsList">
   SELECT *
   FROM CUSTOMER_SERVICE
   WHERE USER_IDX IS NOT NULL
     <if test="type != null and type != ''">
         AND CUSTOMER_SERVICE_TYPE = #{type}
     </if>
   ORDER BY 
        CASE 
            WHEN LENGTH(CUSTOMER_SERVICE_CONTENT) = 0 THEN 1
            WHEN CUSTOMER_SERVICE_CONTENT IS NULL THEN 1
            ELSE 2
        END ASC,
        CUSTOMER_SERVICE_REGDATE DESC
   OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>
  
  <!-- 관리자_고객센터_문의내역_총목록 -->
  <select id="getcountmacsList">
   SELECT COUNT(*)
   FROM CUSTOMER_SERVICE
   WHERE USER_IDX IS NOT NULL
     <if test="type != null and type != ''">
         AND CUSTOMER_SERVICE_TYPE = #{type}
     </if>
  </select>
  
  <!-- 관리자_고객센터_문의내역_조회 -->
  <select id="selectcs">
   SELECT  CUSTOMER_SERVICE_IDX,
           CUSTOMER_SERVICE_TITLE,
           CUSTOMER_SERVICE_TYPE,
           CUSTOMER_SERVICE_CONTENT
    FROM  CUSTOMER_SERVICE
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </select>
  
  <!-- 관리자_고객센터_문의_수정 및 답변 -->
  <update id="updatecs">
    UPDATE CUSTOMER_SERVICE
    SET CUSTOMER_SERVICE_TITLE = #{customer_service_title},
        CUSTOMER_SERVICE_CONTENT = #{customer_service_content},
        CUSTOMER_SERVICE_TYPE = #{customer_service_type}
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </update>
  
  <!-- 관리자_고객센터_문의_삭제 -->
  <delete id="deleteCs">
    DELETE FROM CUSTOMER_SERVICE
    WHERE CUSTOMER_SERVICE_IDX = #{customer_service_idx}
  </delete>
  
  
  <!-- 관리자_고객센터_공지사항_목록 -->
  <select id="getnoticeList">
   SELECT *
   FROM NOTICE
   <if test="type != null and type != ''">
       WHERE NOTICE_TYPE = #{type}
   </if>
   ORDER BY NOTICE_IDX DESC
   OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>
  
  <!-- 관리자_고객센터_공지사항_총목록 -->
  <select id="getcountnoticeList">
   SELECT COUNT(*)
   FROM NOTICE
   <if test="type != null and type != ''">
       WHERE NOTICE_TYPE = #{type}
   </if>
  </select>
  
  <!-- 관리자_고객센터_공지유형_조회 -->
  <select id="getnoticeType">
   SELECT DISTINCT NOTICE_TYPE 
     FROM NOTICE
  </select>
  
  
  <!-- 관리자_고객센터_공지사항_조회 -->
  <select id="selectnotice">
   SELECT NOTICE_IDX,
    	  NOTICE_TITLE,
    	  NOTICE_TYPE,
    	  NOTICE_REGDATE,
      	  NOTICE_CONTENT
   FROM  NOTICE 
   WHERE NOTICE_IDX = ${notice_idx}
  </select>
  
  <!-- 관리자_고객센터_공지사항_수정 -->
  <update id="updatenotice">
    UPDATE NOTICE
    SET NOTICE_TITLE = #{notice_title},
        NOTICE_CONTENT = #{notice_content},
        NOTICE_TYPE = #{notice_type}
    WHERE NOTICE_IDX = #{notice_idx}
  </update>
  
  <!-- 관리자_고객센터_공지사항_삭제 -->
  <delete id="deletenotice">
    DELETE FROM NOTICE
    WHERE NOTICE_IDX = #{notice_idx}
  </delete>
  
  <!-- 관리자_고객센터_공지사항_등록 -->
  <insert id="insertnotice">
   INSERT INTO NOTICE 
   	( 
   	  NOTICE_IDX, NOTICE_TITLE 
     ,NOTICE_TYPE, NOTICE_REGDATE 
     ,NOTICE_CONTENT 
    ) 
   VALUES 
   	( 
   	 (SELECT NVL(MAX(notice_idx),0)+1 FROM NOTICE ) 
   	 ,#{notice_title} 
     ,#{notice_type}
     , SYSDATE
     ,#{notice_content}
    )
  </insert>
  
  <!-- 커뮤니티_조립앨범_게시글 목록-->
  <select id="getalbumList">
   SELECT  
    C.COMMUNITY_IDX,
    C.COMMUNITY_TITLE,
    C.COMMUNITY_CONTENT,
    C.COMMUNITY_REGDATE,
    U.USER_NICKNAME AS USER_NICKNAME,
    COUNT(CA.COMMUNITY_ANSWER_IDX) AS TOTAL_ANSWERS,
    C.COMMUNITY_VIEWS
   FROM  
    COMMUNITY C
   LEFT JOIN  
    COMMUNITY_ANSWER CA ON C.COMMUNITY_IDX = CA.COMMUNITY_IDX
   LEFT JOIN  
    USERS U ON C.USER_IDX = U.USER_IDX
   GROUP BY  
    C.COMMUNITY_IDX, 
    C.COMMUNITY_TITLE, 
    C.COMMUNITY_CONTENT,
    C.COMMUNITY_REGDATE, 
    U.USER_NICKNAME,
    C.COMMUNITY_VIEWS
   <choose>
       <when test="type == 'views'">
           ORDER BY C.COMMUNITY_VIEWS DESC
       </when>
       <otherwise>
           ORDER BY C.COMMUNITY_REGDATE DESC
       </otherwise>
   </choose>
   OFFSET #{start} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>
  
  <!-- 관리자_커뮤니티_총목록 -->
  <select id="getcountalbumList">
   SELECT COUNT(*)
   FROM COMMUNITY
  </select> 
  
  <!-- 관리자_커뮤니티_삭제 -->
  <delete id="deletecommunity">
    BEGIN
        DELETE FROM COMMUNITY_ANSWER WHERE COMMUNITY_IDX = #{community_idx};
        DELETE FROM COMMUNITY_IMAGE WHERE COMMUNITY_IDX = #{community_idx};
        DELETE FROM COMMUNITY WHERE COMMUNITY_IDX = #{community_idx};
    END;
  </delete>
  
  <!-- 카테고리 리스트 가져오기 -->
  <select id="getCategoryList">
  SELECT
    	CATEGORY_IDX,
    	CATEGORY_NAME,
    	PARENT_CATEGORY_IDX,
    	DEPTH
	FROM
    	CATEGORY
  </select>
  
  <insert id="saveProduct">
  
    INSERT INTO PRODUCT (
	    PRODUCT_IDX,
	    PRODUCT_NAME,
	    PRODUCT_DESCRIPTION,
	    PRICE,
	    CATEGORY_IDX
		) VALUES (
		   (SELECT NVL(MAX(PRODUCT_IDX), 0) + 1 FROM PRODUCT),
		   #{productName},
		   #{productDescription},
		   #{price},
		   #{categoryIdx}
		)
  
  </insert>
  
  <select id="getProductIdx">
    SELECT
    	PRODUCT_IDX
	FROM
	    PRODUCT
	WHERE
	    PRODUCT_NAME = #{productName}
	AND 
		PRICE = #{price}
	ORDER BY
	    CREATED_AT DESC
	FETCH FIRST 1 ROW ONLY
  </select>
  
  <insert id="saveProductImage">
  INSERT INTO PRODUCT_IMAGE (
    PRODUCT_IDX,
    PRODUCT_IMAGE_NAME,
    PRODUCT_IMAGE_EXT,
    PRODUCT_SFILE_NAME
	) VALUES (
	    #{productIdx},
	    #{fileList[0].product_image_name},
	    #{fileList[0].product_image_ext},
	    #{fileList[0].product_sfile_name}
	)
  
  </insert>
  
  
</mapper>